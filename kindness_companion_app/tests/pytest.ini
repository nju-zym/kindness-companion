[pytest]
# 测试文件匹配模式
python_files = test_*.py
python_classes = Test*
python_functions = test_*

# 测试输出设置
addopts = 
    --verbose
    --tb=short
    --cov=kindness_companion_app
    --cov-report=term-missing
    --cov-report=html
    --no-cov-on-fail
    --durations=10
    --maxfail=3
    --timeout=300

# 测试环境变量
env =
    TESTING=1
    DEBUG=1
    PYTHONPATH=.

# 测试超时设置
timeout = 300

# 测试标记
markers =
    slow: marks tests as slow (deselect with '-m "not slow"')
    integration: marks tests as integration tests
    unit: marks tests as unit tests
    gui: marks tests as GUI tests
    api: marks tests as API tests
    database: marks tests as database tests
    ai: marks tests as AI tests

# 测试日志设置
log_cli = true
log_cli_level = INFO
log_cli_format = %(asctime)s [%(levelname)8s] %(message)s (%(filename)s:%(lineno)s)
log_cli_date_format = %Y-%m-%d %H:%M:%S

# 测试覆盖率设置
[coverage:run]
branch = True
source = kindness_companion_app
omit = 
    */tests/*
    */__pycache__/*
    */venv/*
    */env/*
    */build/*
    */dist/*
    */site-packages/*
    */node_modules/*
    */migrations/*
    */static/*
    */templates/*
    */media/*
    */locale/*
    */docs/*
    */examples/*
    */scripts/*
    */tools/*
    */utils/*
    */config/*
    */settings/*

[coverage:report]
exclude_lines =
    pragma: no cover
    def __repr__
    raise NotImplementedError
    if __name__ == .__main__.:
    pass
    raise ImportError
    except ImportError:
    def main()
    if TYPE_CHECKING:
    @abstractmethod
    @property
    @classmethod
    @staticmethod
    @dataclass
    @functools.wraps
    @contextmanager
    @contextlib.contextmanager
    @pytest.fixture
    @pytest.mark
    @pytest.skip
    @pytest.xfail
    @pytest.parametrize 